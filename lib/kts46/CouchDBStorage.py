"""
License:
   Copyright 2010 Anthony Kolesov

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

import couchdb, couchdb.design, json
import CouchDBViewDefinitions

class CouchDBStorage:
    """A storage facility for data generated by simulation model.

    Data is buffered to save requestes to server.
    """

    def __init__(self, servername, dbname, jobId, bufferSize = 1000):
        """Initializes new instance of CouchDB storage.

        If specified database doesn't exist it will be created with all required
        views.

        Parameters:
        :servername: Network path to the target server, e.g. http://192.168.0.1:5984.
        :dbname: Name of database where to store results of simultaion.
        :bufferSize: Size of buffer of documents to send. Default values is 1000.
        """
        self.server = couchdb.Server(servername)
        if dbname not in self.server:
            self.db = self.server.create(dbname)
        else:
            self.db = self.server[dbname]
        self.bulk_queue = []
        self.bufferSize = bufferSize
        self.jobId = jobId
        #self._createViews()

    def _createViews(self):
        "Creates all requires views for the database."

        defsStr = CouchDBViewDefinitions.definitions

        defs = [ ]
        for defStr in defsStr:
            defs.append(couchdb.design.ViewDefinition(defStr['doc'],
                defStr['view'], defStr['map']))
        couchdb.design.ViewDefinition.sync_many(self.db, defs )

    def add(self, time, data):
        d = dict(data)
        d['time'] = time
        d['type'] = 'state'
        d['_id'] = 's' + self.jobId + '_' + str(time)
        doc = couchdb.Document(d)

        self.bulk_queue.append(doc)
        if len(self.bulk_queue) >= self.bufferSize:
            self.dump()

    def dump(self):
        if len(self.bulk_queue) > 0:
            progress = self.db['j%sProgress' % self.jobId]
            progress['done'] += len(self.bulk_queue)
            self.bulk_queue.append(progress)
            self.db.update(self.bulk_queue)
            self.bulk_queue = []

    def close(self):
        # couchdb for python doesn't have any 'close' methods, so just dump content.
        self.dump()
