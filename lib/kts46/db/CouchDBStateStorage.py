"""
License:
   Copyright 2010-2011 Anthony Kolesov

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

import couchdb

class CouchDBStateStorage:
    """A storage facility for states generated by simulation model.

    Data is buffered to reduce amount of requestes to server. Length of batch
    is equal to that is in job.simulationParameters.
    """

    def __init__(self, job, fullStateCallback=None):
        "Initializes new instance of CouchDB state storage."
        self.server = job.project.server
        self.db = job.project.db
        self.bulk_queue = []
        self.bufferSize = job.simulationParameters['batchLength']
        self.jobId = job.id
        self.jobDocId = job.docid
        self.fullStateCallback = fullStateCallback
        self.job = job

    def add(self, time, data):
        d = dict(data)
        d['time'] = time
        d['type'] = 'state'
        d['_id'] = ''.join(('s', str(self.jobId), '_', str(time)))
        doc = couchdb.Document(d)

        self.bulk_queue.append(doc)
        if len(self.bulk_queue) >= self.bufferSize:
            self.dump()

    def dump(self):
        if len(self.bulk_queue) > 0:
            #jobProgressId = SimulationProject.jobProgressDocId % self.jobDocId
            #progress = self.db[jobProgressId]
            self.job.progress['done'] += len(self.bulk_queue)
            # Full id will be restored by job storage instance.
            self.job.progress['currentStateId'] = str(self.bulk_queue[-1]['time'])

            if self.fullStateCallback is not None:
                self.job.progress['currentFullState'] = self.fullStateCallback()
            else:
                self.job.progress['currentFullState'] = ''

            self.bulk_queue.append(self.job.progress)
            self.db.update(self.bulk_queue)
            self.bulk_queue = []

    def close(self):
        # couchdb for python doesn't have any 'close' methods, so just dump content.
        self.dump()
